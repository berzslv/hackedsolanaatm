This usually happens when:

You're trying to call a function (instruction) that doesn't exist in your smart contract.

The instruction name is misspelled, or

You didn't properly set the instructionDiscriminator when sending the transaction from your frontend.

You're sending the transaction to the wrong program ID (this one: EnGhdovdYhHk4nsHEJr6gmV5cYfrx53ky19RD56eRRGm).

✅ How to Fix It Step-by-Step
Check Instruction Name in Frontend

Make sure the instruction name in your frontend exactly matches what is defined in your Anchor contract (initialize, registerUser, stake, etc.).

Anchor uses a discriminator (first 8 bytes of the instruction data), so if you don’t use the Anchor IDL properly in your frontend, it won’t find the right handler.

Use Anchor’s IDL to Construct the Instruction If you're building the transaction manually (e.g., in @solana/web3.js), you should use the Anchor client or IDL like this:

ts
Copy
Edit
const program = new anchor.Program(idl, programId, provider);
await program.methods.stake(new anchor.BN(amount)).accounts({
  user: wallet.publicKey,
  userInfo: userInfoPDA,
  vault: vaultPDA,
  userTokenAccount: userTokenAta,
  vaultTokenAccount: vaultTokenAta,
  tokenProgram: TOKEN_PROGRAM_ID,
  systemProgram: SystemProgram.programId,
}).rpc();
Confirm You’re Using the Correct Program ID

Double-check if EnGhdovdYhHk4nsHEJr6gmV5cYfrx53ky19RD56eRRGm is actually the deployed address of your smart contract.

If you're using SolPG or deploying manually, you might have multiple versions of your program. Use solana address -k target/deploy/YOUR_PROGRAM-keypair.json to confirm.

Check idl.json

Make sure your frontend uses the correct and latest version of the IDL JSON file generated by Anchor.

✅ TL;DR Fix Summary
 Double-check the instruction name you're trying to call (e.g. stake)

 Use Anchor's idl.json in your frontend to avoid instruction mismatch

 Confirm you're calling the correct deployed program address

 Use the Anchor client SDK (@project-serum/anchor) if you're not already

