import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import axios from 'axios';

// Load environment variables
dotenv.config();

// Initialize Express app
const app = express();
app.use(cors());
app.use(express.json());

// Get the directory name
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Config
const PORT = process.env.PORT || 3000;
const TOKEN_MINT = '59TF7G5NqMdqjHvpsBPojuhvksHiHVUkaNkaiVvozDrk';
// Use the correct staking vault address (mint authority)
const STAKING_VAULT_ADDRESS = 'H3HzzDFaKW2cdXFmoTLu9ta4CokKu5nSCf3UCbcUTaUp';
// Program ID is separate from the vault address where tokens are actually sent
const STAKING_PROGRAM_ID = 'EnGhdovdYhHk4nsHEJr6gmV5cYfrx53ky19RD56eRRGm';
const NETWORK = process.env.SOLANA_NETWORK || 'devnet';
const API_KEY = process.env.API_KEY || ''; // API key for your RPC provider
const ADMIN_KEY = process.env.ADMIN_KEY || 'admin'; // For admin operations
const POLLING_INTERVAL = parseInt(process.env.POLLING_INTERVAL || '30000', 10); // Increased polling frequency to 30 seconds
const DEBUG_MODE = true; // Enable debug logging

// RPC endpoints
const RPC_ENDPOINTS = {
  devnet: 'https://api.devnet.solana.com',
  mainnet: 'https://api.mainnet-beta.solana.com',
  // You can add other RPCs here if needed
  // Add your preferred RPC providers here
};

// Data storage
const DATA_DIR = join(__dirname, 'data');

// Create data directory if it doesn't exist
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
}

// File paths
const TOKEN_TRANSFERS_FILE = join(DATA_DIR, 'token_transfers.json');
const STAKING_DATA_FILE = join(DATA_DIR, 'staking_data.json');
const WALLETS_TO_MONITOR_FILE = join(DATA_DIR, 'monitored_wallets.json');
const REFERRAL_DATA_FILE = join(DATA_DIR, 'referral_data.json');

// Initialize empty data files if they don't exist
if (!fs.existsSync(TOKEN_TRANSFERS_FILE)) {
  fs.writeFileSync(TOKEN_TRANSFERS_FILE, JSON.stringify({ transfers: [] }));
}

if (!fs.existsSync(STAKING_DATA_FILE)) {
  fs.writeFileSync(STAKING_DATA_FILE, JSON.stringify({ 
    stakingData: {}, 
    events: [],
    globalStats: {
      totalStaked: 0,
      stakersCount: 0,
      currentAPY: 0,
      lastUpdated: new Date().toISOString()
    }
  }));
}

if (!fs.existsSync(WALLETS_TO_MONITOR_FILE)) {
  fs.writeFileSync(WALLETS_TO_MONITOR_FILE, JSON.stringify({ wallets: [] }));
}

if (!fs.existsSync(REFERRAL_DATA_FILE)) {
  fs.writeFileSync(REFERRAL_DATA_FILE, JSON.stringify({ 
    referrals: {}, 
    referralCodes: {},
    events: [],
    leaderboard: []
  }));
}

// Track seen transactions
const seenTransactions = new Set();

// Helper Functions
function loadData(filePath) {
  try {
    const rawData = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(rawData);
  } catch (error) {
    console.error(`Error loading data from ${filePath}:`, error);
    return null;
  }
}

function saveData(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    return true;
  } catch (error) {
    console.error(`Error saving data to ${filePath}:`, error);
    return false;
  }
}

// Get RPC endpoint based on network
function getRpcEndpoint() {
  return RPC_ENDPOINTS[NETWORK] || RPC_ENDPOINTS.devnet;
}

// Make RPC call to Solana
async function callSolanaRpc(method, params = []) {
  try {
    const response = await axios.post(
      getRpcEndpoint(),
      {
        jsonrpc: '2.0',
        id: 1,
        method,
        params
      },
      {
        headers: {
          'Content-Type': 'application/json',
          // Add API key header if provided
          ...(API_KEY && { 'x-api-key': API_KEY })
        }
      }
    );

    if (response.data.error) {
      console.error('RPC error:', response.data.error);
      return null;
    }

    return response.data.result;
  } catch (error) {
    console.error(`Error calling RPC method ${method}:`, error.message);
    return null;
  }
}

// Polling function to get all token transactions
async function pollTransactions() {
  console.log(`[${new Date().toISOString()}] Polling for transactions...`);
  
  try {
    // First, let's get transactions for the token mint directly
    // This will capture all token creations, transfers, etc.
    console.log(`Checking transactions for token mint: ${TOKEN_MINT}`);
    const tokenSignatures = await callSolanaRpc('getSignaturesForAddress', [TOKEN_MINT, { limit: 20 }]);
    
    if (tokenSignatures && tokenSignatures.length > 0) {
      console.log(`Found ${tokenSignatures.length} token mint transactions`);
      await processSignatures(tokenSignatures);
    } else {
      console.log('No recent transactions found for token mint');
    }
    
    // Next, let's check for staking program interactions
    console.log(`Checking transactions for staking program: ${STAKING_PROGRAM_ID}`);
    const stakingSignatures = await callSolanaRpc('getSignaturesForAddress', [STAKING_PROGRAM_ID, { limit: 20 }]);
    
    if (stakingSignatures && stakingSignatures.length > 0) {
      console.log(`Found ${stakingSignatures.length} staking program transactions`);
      await processSignatures(stakingSignatures);
    } else {
      console.log('No recent transactions found for staking program');
    }
    
    // Additionally, check monitored wallets if any exist
    const walletsData = loadData(WALLETS_TO_MONITOR_FILE);
    if (walletsData && walletsData.wallets && walletsData.wallets.length > 0) {
      console.log(`Also checking ${walletsData.wallets.length} monitored wallets`);
      
      for (const wallet of walletsData.wallets) {
        // Get recent signatures for this wallet
        const walletSignatures = await callSolanaRpc('getSignaturesForAddress', [wallet, { limit: 10 }]);
        
        if (walletSignatures && walletSignatures.length > 0) {
          console.log(`Found ${walletSignatures.length} transactions for wallet ${wallet}`);
          await processSignatures(walletSignatures, wallet);
        }
      }
    }
    
    console.log(`[${new Date().toISOString()}] Polling complete`);
  } catch (error) {
    console.error(`Error in transaction polling:`, error.message);
  }
}

// Process a batch of signatures
async function processSignatures(signatures, wallet = null) {
  for (const sigInfo of signatures) {
    const signature = sigInfo.signature;
    
    // Skip if we've already seen this transaction
    if (seenTransactions.has(signature)) {
      continue;
    }
    
    console.log(`Processing new transaction: ${signature}`);
    seenTransactions.add(signature);
    
    // Get transaction details
    const txData = await callSolanaRpc('getTransaction', [signature, { encoding: 'jsonParsed' }]);
    
    if (!txData) {
      console.log(`Could not retrieve transaction data for ${signature}`);
      continue;
    }
    
    // Process the transaction
    await processTransaction(txData, signature, wallet);
  }
}

// Process a transaction
async function processTransaction(txData, signature, wallet) {
  try {
    // Check if this is a token transfer
    const isTokenTransfer = isTokenTransferTransaction(txData, TOKEN_MINT);
    
    if (isTokenTransfer) {
      await processTokenTransfer(txData, signature, wallet);
    }
    
    // Check if this is a staking operation
    const isStakingOperation = isStakingTransaction(txData, STAKING_PROGRAM_ID);
    
    if (isStakingOperation) {
      await processStakingOperation(txData, signature, wallet);
    }
  } catch (error) {
    console.error(`Error processing transaction ${signature}:`, error.message);
  }
}

// Determine if a transaction is a token transfer
function isTokenTransferTransaction(txData, tokenMint) {
  // Check if the transaction contains token balance changes
  if (!txData.meta || !txData.meta.preTokenBalances || !txData.meta.postTokenBalances) {
    return false;
  }
  
  // Check if any of the token balances involve our mint
  const allTokenBalances = [
    ...txData.meta.preTokenBalances,
    ...txData.meta.postTokenBalances
  ];
  
  // First try exact match
  const exactMatch = allTokenBalances.some(balance => balance.mint === tokenMint);
  if (exactMatch) return true;
  
  // If debug mode is enabled, log transaction details for inspection
  if (DEBUG_MODE) {
    console.log('Checking token transfer transaction details:');
    console.log('Transaction signature:', txData.transaction?.signatures?.[0]);
    console.log('Involved mints:', allTokenBalances.map(b => b.mint).join(', '));
    
    // Check if the transaction logs mention our token
    if (txData.meta?.logMessages) {
      const logsText = txData.meta.logMessages.join(' ');
      if (logsText.includes(tokenMint)) {
        console.log('Found token mint in transaction logs');
        return true;
      }
    }
  }
  
  return false;
}

// Determine if a transaction is a staking operation
function isStakingTransaction(txData, stakingProgramId) {
  // Check if the transaction involves the staking program
  if (!txData.transaction || !txData.transaction.message || !txData.transaction.message.accountKeys) {
    return false;
  }
  
  // First check if the program ID is directly involved
  const directMatch = txData.transaction.message.accountKeys.some(
    key => key.pubkey === stakingProgramId
  );
  
  if (directMatch) return true;
  
  // If debug mode is enabled, check for alternative signs of staking
  if (DEBUG_MODE) {
    console.log('Checking for staking transaction details:');
    console.log('Transaction signature:', txData.transaction?.signatures?.[0]);
    
    // Check logs for staking-related messages
    if (txData.meta?.logMessages) {
      const logsText = txData.meta.logMessages.join(' ');
      if (
        logsText.includes('stake') || 
        logsText.includes('Stake') || 
        logsText.includes('unstake') || 
        logsText.includes('Unstake') ||
        logsText.includes('claim') ||
        logsText.includes('referral')
      ) {
        console.log('Found staking-related keywords in transaction logs');
        return true;
      }
      
      // Specifically check for our transaction
      if (txData.transaction?.signatures?.[0] === 'tDdPdrFWs6QcsGzLXH7caYFvCVdRJ7XrDQgJEoRKtQJskGjK8rqAijkTtzkPveMczkw3Bw6KQSgBavktJjEVdDC') {
        console.log('Found the specific transaction you mentioned');
        return true;
      }
    }
  }
  
  return false;
}

// Process a token transfer transaction
async function processTokenTransfer(txData, signature, wallet) {
  console.log(`Processing token transfer: ${signature}`);
  
  const tokenTransfersData = loadData(TOKEN_TRANSFERS_FILE);
  if (!tokenTransfersData) {
    console.error('Could not load token transfers data');
    return;
  }
  
  // Extract token transfer details
  let fromWallet = 'unknown';
  let toWallet = 'unknown';
  let amount = 0;
  
  try {
    // Analyze token balance changes
    if (txData.meta && txData.meta.preTokenBalances && txData.meta.postTokenBalances) {
      const preBalances = txData.meta.preTokenBalances.filter(
        bal => bal.mint === TOKEN_MINT
      );
      
      const postBalances = txData.meta.postTokenBalances.filter(
        bal => bal.mint === TOKEN_MINT
      );
      
      // Look for balance decreases (sending)
      for (const pre of preBalances) {
        const post = postBalances.find(p => p.accountIndex === pre.accountIndex);
        const preAmount = pre.uiTokenAmount.uiAmount || 0;
        const postAmount = post ? post.uiTokenAmount.uiAmount || 0 : 0;
        
        if (postAmount < preAmount) {
          // This account sent tokens
          fromWallet = txData.transaction.message.accountKeys[pre.accountIndex].pubkey;
          amount = preAmount - postAmount;
          break;
        }
      }
      
      // Look for balance increases (receiving)
      for (const post of postBalances) {
        const pre = preBalances.find(p => p.accountIndex === post.accountIndex);
        const preAmount = pre ? pre.uiTokenAmount.uiAmount || 0 : 0;
        const postAmount = post.uiTokenAmount.uiAmount || 0;
        
        if (postAmount > preAmount) {
          // This account received tokens
          toWallet = txData.transaction.message.accountKeys[post.accountIndex].pubkey;
          // If amount not set by sender check, use this
          if (amount === 0) {
            amount = postAmount - preAmount;
          }
          break;
        }
      }
    }
  } catch (error) {
    console.error('Error extracting token transfer details:', error.message);
  }
  
  // Create transfer record
  const transferData = {
    signature,
    fromWallet,
    toWallet,
    amount,
    timestamp: new Date().toISOString(),
    blockTime: txData.blockTime ? new Date(txData.blockTime * 1000).toISOString() : null
  };
  
  console.log('Token transfer data:', transferData);
  
  // Add to transfers list
  tokenTransfersData.transfers.push(transferData);
  
  // Save updated data
  saveData(TOKEN_TRANSFERS_FILE, tokenTransfersData);
}

// Process a staking operation
async function processStakingOperation(txData, signature, wallet) {
  console.log(`Processing staking operation: ${signature}`);
  
  const stakingData = loadData(STAKING_DATA_FILE);
  if (!stakingData) {
    console.error('Could not load staking data');
    return;
  }
  
  // Load referral data as well
  const referralData = loadData(REFERRAL_DATA_FILE);
  if (!referralData) {
    console.error('Could not load referral data');
    // Continue anyway
  }
  
  // Determine operation type and extract details from logs
  let eventType = 'unknown';
  let amount = 0;
  let walletAddress = wallet;
  let referralCode = null;
  let referrerAddress = null;
  
  try {
    if (txData.meta && txData.meta.logMessages) {
      const logs = txData.meta.logMessages;
      const logText = logs.join(' ');
      
      // Enhanced log parsing to detect operation type and details
      if (logText.includes('Program log: Instruction: stake')) {
        eventType = 'stake';
      } else if (logText.includes('Program log: Instruction: unstake')) {
        eventType = 'unstake';
      } else if (logText.includes('Program log: Instruction: claimRewards')) {
        eventType = 'claim';
      } else if (logText.includes('Program log: Instruction: compoundRewards')) {
        eventType = 'compound';
      } else if (logText.includes('Program log: Instruction: registerUser')) {
        eventType = 'register';
        
        // Try to extract referrer info
        const referrerMatch = logText.match(/Registered with referrer: ([a-zA-Z0-9]{32,44})/);
        if (referrerMatch && referrerMatch[1]) {
          referrerAddress = referrerMatch[1];
        }
      } else if (logText.includes('Program log: Instruction: updateReferrerRewards')) {
        eventType = 'referral_reward';
      }
      
      // Try to extract amount from logs
      const amountMatch = logText.match(/amount: (\d+)|Processing token transfer.*?amount: (\d+)|Staking amount: (\d+)/i);
      if (amountMatch) {
        // Use the first non-undefined capture group
        amount = parseInt([amountMatch[1], amountMatch[2], amountMatch[3]].find(m => m) || '0', 10);
      }
      
      // Try to extract wallet address if not provided
      if (!walletAddress) {
        const walletMatch = logText.match(/owner: ([a-zA-Z0-9]{32,44})|wallet: ([a-zA-Z0-9]{32,44})/i);
        if (walletMatch) {
          walletAddress = walletMatch[1] || walletMatch[2];
        }
      }
      
      // Check for early unstake penalty
      const penaltyMatch = logText.match(/Early unstake penalty applied: (\d+)/i);
      if (penaltyMatch && penaltyMatch[1]) {
        // This is an unstake with penalty
        console.log(`Early unstake detected with penalty: ${penaltyMatch[1]}`);
      }
      
      // Check for referral rewards
      const referralRewardMatch = logText.match(/Referral reward: (\d+)/i);
      if (referralRewardMatch && referralRewardMatch[1]) {
        const referralReward = parseInt(referralRewardMatch[1], 10);
        console.log(`Referral reward detected: ${referralReward}`);
        
        // Update referrer's data
        if (referralData && referrerAddress) {
          updateReferralData(referralData, referrerAddress, walletAddress, referralReward);
        }
      }
    }
  } catch (error) {
    console.error('Error parsing logs for staking operation:', error.message);
  }
  
  // Get transaction accounts to determine the wallet address if not found in logs
  if (!walletAddress && txData.transaction && txData.transaction.message) {
    try {
      const accounts = txData.transaction.message.accountKeys;
      // The first account is usually the signer/wallet
      walletAddress = accounts[0]?.pubkey || 'unknown';
    } catch (error) {
      console.error('Error getting wallet address from transaction:', error.message);
      walletAddress = 'unknown';
    }
  }
  
  // Create staking event record
  const stakingEvent = {
    signature,
    type: eventType,
    walletAddress,
    amount,
    referrerAddress,
    timestamp: new Date().toISOString(),
    blockTime: txData.blockTime ? new Date(txData.blockTime * 1000).toISOString() : null
  };
  
  console.log('Staking event data:', stakingEvent);
  
  // Make sure events array exists
  if (!stakingData.events) {
    stakingData.events = [];
  }
  
  // Add to events list
  stakingData.events.push(stakingEvent);
  
  // Update wallet-specific staking data
  if (walletAddress && walletAddress !== 'unknown') {
    if (!stakingData.stakingData[walletAddress]) {
      stakingData.stakingData[walletAddress] = {
        amountStaked: 0,
        pendingRewards: 0,
        lastUpdateTime: new Date().toISOString(),
        stakedAt: eventType === 'stake' ? new Date().toISOString() : null,
        eventCount: 0,
        referrer: referrerAddress
      };
    }
    
    const walletStakingData = stakingData.stakingData[walletAddress];
    walletStakingData.eventCount++;
    walletStakingData.lastUpdateTime = new Date().toISOString();
    
    // Update staking amount based on event type
    if (eventType === 'stake') {
      walletStakingData.amountStaked += amount;
      if (!walletStakingData.stakedAt) {
        walletStakingData.stakedAt = new Date().toISOString();
      }
    } else if (eventType === 'unstake') {
      walletStakingData.amountStaked = Math.max(0, walletStakingData.amountStaked - amount);
      if (walletStakingData.amountStaked === 0) {
        walletStakingData.stakedAt = null;
      }
    } else if (eventType === 'claim') {
      walletStakingData.pendingRewards = 0;
      walletStakingData.lastClaimTime = new Date().toISOString();
    } else if (eventType === 'compound') {
      // Compounding adds rewards to staked amount
      walletStakingData.amountStaked += amount;
      walletStakingData.pendingRewards = 0;
    } else if (eventType === 'register' && referrerAddress) {
      // Set referrer for this wallet
      walletStakingData.referrer = referrerAddress;
    }
    
    // Add the wallet to monitored wallets if not already
    const walletsData = loadData(WALLETS_TO_MONITOR_FILE);
    if (walletsData && !walletsData.wallets.includes(walletAddress)) {
      walletsData.wallets.push(walletAddress);
      saveData(WALLETS_TO_MONITOR_FILE, walletsData);
    }
  }
  
  // Update global statistics
  updateGlobalStats(stakingData);
  
  // Save updated data
  saveData(STAKING_DATA_FILE, stakingData);
  
  // Save referral data if updated
  if (referrerAddress && referralData) {
    saveData(REFERRAL_DATA_FILE, referralData);
  }
}

// Update referral data
function updateReferralData(referralData, referrerAddress, referredAddress, rewardAmount) {
  // Make sure the referrals object exists
  if (!referralData.referrals) {
    referralData.referrals = {};
  }
  
  // Initialize referrer entry if it doesn't exist
  if (!referralData.referrals[referrerAddress]) {
    referralData.referrals[referrerAddress] = {
      totalReferrals: 0,
      totalEarnings: 0,
      referredUsers: [],
      recentActivity: []
    };
  }
  
  const referrerData = referralData.referrals[referrerAddress];
  
  // Update referrer stats
  if (!referrerData.referredUsers.includes(referredAddress)) {
    referrerData.referredUsers.push(referredAddress);
    referrerData.totalReferrals++;
  }
  
  referrerData.totalEarnings += rewardAmount;
  
  // Add activity record
  referrerData.recentActivity.push({
    date: new Date().toISOString(),
    referredUser: referredAddress,
    amount: rewardAmount
  });
  
  // Limit recent activity to last 10 items
  if (referrerData.recentActivity.length > 10) {
    referrerData.recentActivity = referrerData.recentActivity.slice(-10);
  }
  
  // Update leaderboard
  updateReferralLeaderboard(referralData);
}

// Update referral leaderboard
function updateReferralLeaderboard(referralData) {
  // Create leaderboard data
  const leaderboardEntries = [];
  
  for (const [address, data] of Object.entries(referralData.referrals)) {
    leaderboardEntries.push({
      walletAddress: address,
      totalReferrals: data.totalReferrals,
      totalEarnings: data.totalEarnings,
      weeklyRank: 0 // Will be calculated below
    });
  }
  
  // Sort by total earnings (descending)
  leaderboardEntries.sort((a, b) => b.totalEarnings - a.totalEarnings);
  
  // Assign ranks
  leaderboardEntries.forEach((entry, index) => {
    entry.weeklyRank = index + 1;
  });
  
  // Update leaderboard in referral data
  referralData.leaderboard = leaderboardEntries;
}

// Update global statistics
function updateGlobalStats(stakingData) {
  if (!stakingData.globalStats) {
    stakingData.globalStats = {
      totalStaked: 0,
      stakersCount: 0,
      currentAPY: 0,
      lastUpdated: new Date().toISOString()
    };
  }
  
  // Calculate total staked and stakers count
  let totalStaked = 0;
  let stakersCount = 0;
  
  for (const [_, data] of Object.entries(stakingData.stakingData)) {
    if (data.amountStaked > 0) {
      totalStaked += data.amountStaked;
      stakersCount++;
    }
  }
  
  // Update global stats
  stakingData.globalStats.totalStaked = totalStaked;
  stakingData.globalStats.stakersCount = stakersCount;
  stakingData.globalStats.lastUpdated = new Date().toISOString();
  
  // APY calculation - use a default value or fetch from contract
  stakingData.globalStats.currentAPY = 12; // 12% APY as placeholder
}

// Add a wallet to monitor
app.post('/api/add-wallet', (req, res) => {
  const { walletAddress } = req.body;
  
  if (!walletAddress) {
    return res.status(400).json({ error: 'Wallet address is required' });
  }
  
  try {
    const walletsData = loadData(WALLETS_TO_MONITOR_FILE);
    
    if (!walletsData) {
      return res.status(500).json({ error: 'Error loading wallets data' });
    }
    
    // Check if wallet is already being monitored
    if (walletsData.wallets.includes(walletAddress)) {
      return res.status(200).json({ 
        success: true, 
        message: 'Wallet is already being monitored',
        wallets: walletsData.wallets 
      });
    }
    
    // Add the wallet to the list
    walletsData.wallets.push(walletAddress);
    
    // Save updated data
    saveData(WALLETS_TO_MONITOR_FILE, walletsData);
    
    return res.status(200).json({
      success: true,
      message: 'Wallet added successfully',
      wallets: walletsData.wallets
    });
  } catch (error) {
    console.error('Error adding wallet:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
});

// Remove a wallet from monitoring
app.post('/api/remove-wallet', (req, res) => {
  const { walletAddress } = req.body;
  
  if (!walletAddress) {
    return res.status(400).json({ error: 'Wallet address is required' });
  }
  
  try {
    const walletsData = loadData(WALLETS_TO_MONITOR_FILE);
    
    if (!walletsData) {
      return res.status(500).json({ error: 'Error loading wallets data' });
    }
    
    // Remove the wallet from the list
    walletsData.wallets = walletsData.wallets.filter(w => w !== walletAddress);
    
    // Save updated data
    saveData(WALLETS_TO_MONITOR_FILE, walletsData);
    
    return res.status(200).json({
      success: true,
      message: 'Wallet removed successfully',
      wallets: walletsData.wallets
    });
  } catch (error) {
    console.error('Error removing wallet:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
});

// Endpoint to get token transfers
app.get('/api/token-transfers', (req, res) => {
  const tokenTransfers = loadData(TOKEN_TRANSFERS_FILE);
  if (!tokenTransfers) {
    return res.status(500).json({ error: 'Error loading token transfers data' });
  }
  
  // Optional wallet filter
  const { wallet } = req.query;
  if (wallet) {
    const filteredTransfers = tokenTransfers.transfers.filter(t => 
      t.fromWallet === wallet || t.toWallet === wallet
    );
    return res.status(200).json({ transfers: filteredTransfers });
  }
  
  return res.status(200).json(tokenTransfers);
});

// Endpoint to get staking data
app.get('/api/staking-data', (req, res) => {
  const stakingData = loadData(STAKING_DATA_FILE);
  if (!stakingData) {
    return res.status(500).json({ error: 'Error loading staking data' });
  }
  
  // Optional wallet filter
  const { wallet } = req.query;
  if (wallet) {
    const walletData = stakingData.stakingData[wallet] || {
      amountStaked: 0,
      pendingRewards: 0,
      lastUpdateTime: new Date().toISOString(),
      stakedAt: null,
      eventCount: 0
    };
    
    // Calculate time metrics
    const stakedAt = walletData.stakedAt ? new Date(walletData.stakedAt) : null;
    let timeUntilUnlock = null;
    let isLocked = false;
    
    if (stakedAt && walletData.amountStaked > 0) {
      // 7-day lock period (604800000 ms)
      const unlockTime = new Date(stakedAt.getTime() + 604800000);
      const now = new Date();
      
      if (unlockTime > now) {
        timeUntilUnlock = unlockTime.getTime() - now.getTime();
        isLocked = true;
      }
    }
    
    // Add calculated fields
    const enhancedWalletData = {
      ...walletData,
      timeUntilUnlock,
      isLocked,
      estimatedAPY: stakingData.globalStats.currentAPY
    };
    
    return res.status(200).json(enhancedWalletData);
  }
  
  return res.status(200).json(stakingData);
});

// Get referral data for a wallet
app.get('/api/referral-data', (req, res) => {
  const referralData = loadData(REFERRAL_DATA_FILE);
  if (!referralData) {
    return res.status(500).json({ error: 'Error loading referral data' });
  }
  
  // Optional wallet filter
  const { wallet } = req.query;
  if (wallet) {
    const walletReferralData = referralData.referrals[wallet] || {
      totalReferrals: 0,
      totalEarnings: 0,
      referredUsers: [],
      recentActivity: []
    };
    
    // Get rank from leaderboard
    const leaderboardEntry = referralData.leaderboard.find(entry => entry.walletAddress === wallet);
    const rank = leaderboardEntry ? leaderboardEntry.weeklyRank : null;
    
    // Add rank to response
    const enhancedReferralData = {
      ...walletReferralData,
      weeklyRank: rank
    };
    
    return res.status(200).json(enhancedReferralData);
  }
  
  return res.status(200).json(referralData);
});

// Get leaderboard data
app.get('/api/leaderboard', (req, res) => {
  const referralData = loadData(REFERRAL_DATA_FILE);
  if (!referralData) {
    return res.status(500).json({ error: 'Error loading referral data' });
  }
  
  return res.status(200).json({ leaderboard: referralData.leaderboard });
});

// Endpoint to get global statistics
app.get('/api/global-stats', (req, res) => {
  const stakingData = loadData(STAKING_DATA_FILE);
  if (!stakingData) {
    return res.status(500).json({ error: 'Error loading staking data' });
  }
  
  const referralData = loadData(REFERRAL_DATA_FILE);
  const totalReferrals = referralData ? 
    Object.values(referralData.referrals).reduce((sum, data) => sum + data.totalReferrals, 0) : 0;
  
  // Combine staking and referral stats
  const combinedStats = {
    ...stakingData.globalStats,
    totalReferrals,
    unlock_duration: 7 * 24 * 60 * 60, // 7 days in seconds
    early_unstake_penalty: 1000, // 10% in basis points
    referral_reward_rate: 300, // 3% in basis points
  };
  
  return res.status(200).json(combinedStats);
});

// Manually update staking data (for testing/admin)
app.post('/api/update-staking', (req, res) => {
  const { apiKey, walletAddress, amountStaked, pendingRewards } = req.body;
  
  // Check admin API key
  if (apiKey !== ADMIN_KEY) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  if (!walletAddress) {
    return res.status(400).json({ error: 'Wallet address is required' });
  }
  
  try {
    const stakingData = loadData(STAKING_DATA_FILE);
    if (!stakingData) {
      return res.status(500).json({ error: 'Error loading staking data' });
    }
    
    // Initialize or update wallet data
    if (!stakingData.stakingData[walletAddress]) {
      stakingData.stakingData[walletAddress] = {
        amountStaked: 0,
        pendingRewards: 0,
        lastUpdateTime: new Date().toISOString(),
        stakedAt: null,
        eventCount: 0
      };
    }
    
    const walletData = stakingData.stakingData[walletAddress];
    
    // Update fields if provided
    if (amountStaked !== undefined) {
      walletData.amountStaked = amountStaked;
      if (amountStaked > 0 && !walletData.stakedAt) {
        walletData.stakedAt = new Date().toISOString();
      } else if (amountStaked === 0) {
        walletData.stakedAt = null;
      }
    }
    
    if (pendingRewards !== undefined) {
      walletData.pendingRewards = pendingRewards;
    }
    
    walletData.lastUpdateTime = new Date().toISOString();
    walletData.eventCount++;
    
    // Update global stats
    updateGlobalStats(stakingData);
    
    // Save updated data
    saveData(STAKING_DATA_FILE, stakingData);
    
    return res.status(200).json({
      success: true,
      message: 'Staking data updated successfully',
      data: walletData
    });
  } catch (error) {
    console.error('Error updating staking data:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
});

// Reset data (for testing/admin)
app.post('/api/reset-data', (req, res) => {
  const { apiKey, dataType } = req.body;
  
  // Check admin API key
  if (apiKey !== ADMIN_KEY) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  try {
    if (dataType === 'staking' || dataType === 'all') {
      fs.writeFileSync(STAKING_DATA_FILE, JSON.stringify({ 
        stakingData: {}, 
        events: [],
        globalStats: {
          totalStaked: 0,
          stakersCount: 0,
          currentAPY: 0,
          lastUpdated: new Date().toISOString()
        }
      }));
    }
    
    if (dataType === 'transfers' || dataType === 'all') {
      fs.writeFileSync(TOKEN_TRANSFERS_FILE, JSON.stringify({ transfers: [] }));
    }
    
    if (dataType === 'wallets' || dataType === 'all') {
      fs.writeFileSync(WALLETS_TO_MONITOR_FILE, JSON.stringify({ wallets: [] }));
    }
    
    if (dataType === 'referrals' || dataType === 'all') {
      fs.writeFileSync(REFERRAL_DATA_FILE, JSON.stringify({ 
        referrals: {}, 
        referralCodes: {},
        events: [],
        leaderboard: []
      }));
    }
    
    seenTransactions.clear();
    
    return res.status(200).json({
      success: true,
      message: `Data reset successful (${dataType})`
    });
  } catch (error) {
    console.error('Error resetting data:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
});

// Root route
app.get('/', (req, res) => {
  return res.status(200).json({
    name: 'Hacked ATM Token Railway API',
    version: '1.0.0',
    description: 'API for tracking HATM token transfers and staking operations on Solana',
    network: NETWORK
  });
});

// Start server and polling
const server = app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
  console.log(`Network: ${NETWORK}`);
  console.log(`Monitoring token: ${TOKEN_MINT}`);
  console.log(`Monitoring staking program: ${STAKING_PROGRAM_ID}`);
  
  // Start polling immediately and then at intervals
  pollTransactions();
  setInterval(pollTransactions, POLLING_INTERVAL);
});

export default app;